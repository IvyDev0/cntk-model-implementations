#
# Inception-V4 Training Script, for CIFAR-10
# Details are in https://arxiv.org/pdf/1602.07261v2.pdf
#

command = Train:Eval

deviceId = "Auto"
precision = "float"
#traceLevel = 1
#perfTraceLevel = 1
#parallelTrain = true
numMBsToShowResult = 100

RootDir     = "."
ConfigDir   = "$RootDir$"
ImageNetDir = "$ConfigDir$"
DataDir     = "$RootDir$/../data/CIFAR-10"
OutputDir   = "$RootDir$/Output"
ModelDir    = "$OutputDir$/Model"
stderr      = "$OutputDir$/InceptionV4"
modelPath   = "$ModelDir$/InceptionV4"

ImageH    = 32
ImageW    = 32
ImageC    = 3
NumLabels = 10

###################
# TRAINING CONFIG #
###################

Train = {
    action = "train"

    BrainScriptNetworkBuilder = {
        include "$ConfigDir$/Inception-V4-Layers.bs"
        include "$ConfigDir$/Inception-V4.bs"

        imageShape  = $ImageH$:$ImageW$:$ImageC$
        labelDim    = $NumLabels$
        bnTimeConst = 4096

        # inputs
        features = Input {imageShape}
        labels   = Input {labelDim}

        # apply model to features
        model    = InceptionV4_CIFAR10_Model(features, labelDim, bnTimeConst)
        z        = model.z

        # connect to system
        ce       = CrossEntropyWithSoftmax (labels, z)
        errs     = ClassificationError     (labels, z)
        top5Errs = ClassificationError     (labels, z, topN=5)

        featureNodes    = (features)
        labelNodes      = (labels)
        criterionNodes  = (ce)
        evaluationNodes = (errs : top5Errs)
        outputNodes     = (z)
    }

    SGD = {
        epochSize = 0
        minibatchSize = 32
        learningRatesPerMB = 0.45*2:0.432
        momentumPerMB = 0.9
        maxEpochs = 300

        gradUpdateType = "None"
        L2RegWeight = 0.0001
        numMBsToShowResult = 100
        dropoutRate = 0.2
        useNAG = true

        autoAdjust = [
            autoAdjustLR = "adjustAfterEpoch"
            reduceLearnRateIfImproveLessThan = 1000
            learnRateAdjustInterval = 2
            learnRateDecreaseFactor = 0.94
            loadBestModel = false
        ]
    }

    reader = {
        verbosity = 0 ; randomize = true
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "$DataDir$/train_map.txt"
            input = {
                features = { 
                    transforms = (
                        { type = "Crop"; 
                        cropType = "RandomArea"; 
                        sideRatio = 0.466:0.8;
                        jitterType = "uniRatio" } :

                        { type = "Scale"; 
                        width = $ImageW$; 
                        height = $ImageH$; 
                        channels = $ImageC$; 
                        interpolations = "linear" } :

                        # Color Augmentation 
                        { type = "Color"; 
                        brightnessRadius = 0.125; 
                        contrastRadius = 0.5; 
                        saturationRadius = 0.5 } :

                        { type = "Transpose" }
                    )
                    meanFile = "$dataDir$/CIFAR-10_mean.xml"
                }
                labels = { labelDim = $NumLabels$ }
            }
        })
    }

    cvreader = {
        verbosity = 0 ; randomize = false
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "$DataDir$/test_map.txt"
            input = {
                features = { 
                    transforms = (
                       { type = "Crop"; 
                       cropType = "Center"; 
                       sideRatio = 0.8 } :

                       { type = "Scale"; 
                       width = $ImageW$; 
                       height = $ImageH$; 
                       channels = $ImageC$; 
                       interpolations = "linear" } :

                       { type = "Transpose" }
                    )
                    meanFile = "$dataDir$/CIFAR-10_mean.xml"
                }
                labels = { labelDim = $NumLabels$ }
            }
        })
    }
}

Eval = [
    action = "test"
    evalNodeNames = errs:top5Errs  # also test top-5 error rate
    minibatchSize = 128

    reader = {
        verbosity = 0 ; randomize = false
        deserializers = ({
            type = "ImageDeserializer" ; module = "ImageReader"
            file = "$DataDir$/test_map.txt"
            input = {
                features = { 
                transforms = (
                   { type = "Crop"; 
                   cropType = "Center"; 
                   sideRatio = 0.8 } :

                   { type = "Scale"; 
                   width = $ImageW$; 
                   height = $ImageH$; 
                   channels = $ImageC$; 
                   interpolations = "linear" } :

                   { type = "Transpose" }
                )}
                labels = { labelDim = $NumLabels$ }
            }
        })
    }
]
